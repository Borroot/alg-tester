#!/usr/bin/env bash
# AUTHOR: Bram Pulles

source defaults

# Check if the current version is up-to-date with upstream, if not show a message.
branch=$(git rev-parse --abbrev-ref HEAD)
if [[ "$branch" == "master" ]] && $(timeout 1 git fetch 2> /dev/null)
then
	headhash=$(git rev-parse HEAD)
	upstreamhash=$(git rev-parse master@{upstream})

	if [[ "$headhash" != "$upstreamhash" ]]
	then
		echo There has been a new update upstream. Please type in \`git pull\` to update your version.
	fi
fi

TMP=$(getopt "p:s:m:dxcj3h" "$@") || exit 1
eval set -- "$TMP"

while true; do 
	case "$1" in
		-p)  PROGRAM="$2"                 ; shift 2 ;;
		-s)  SAMPLES="$2"                 ; shift 2 ;;
		-m)  MAX_TIME="$2"                ; shift 2 ;;
		-d)  DEBUG=true                   ; shift   ;;
		-x)  STATS=true                   ; shift   ;;
		-c)  RUN=./                       ; shift   ;;
		-j)  JAVA=true                    ; shift   ;; 
		-3)  RUN="python3 "               ; shift   ;;
		-h)  man "$MAN_PAGE"              ; exit 0  ;;
		--)  shift                        ; break   ;;
	esac
done

# We need to set this after all the other options have been passed
# since it uses the variable for PROGRAM.
if [[ $JAVA = true ]] 
then
	# Detect whether a jar file is used.
	if grep '[\s\S]*.jar' <<< "$PROGRAM"
	then
		RUN="java -jar "
	else
		RUN="java -classpath $(dirname $PROGRAM) "
		PROGRAM="$(basename $PROGRAM)"
	fi
fi

# If the PROGRAM we are trying to run is C++ and we have an absolute path
# then we do not want to have RUN=./ but RUN=
[[ $PROGRAM == /* && $RUN == "./" ]] && RUN=""

# Colors and fonts.
GREEN='\e[32m'
RED='\e[31m'
RESET='\e[0m'
DIM='\e[2m'
BOLD=$(tput bold)
NORMAL=$(tput sgr0)

# Create some temporary files.
temp_time_result=$(mktemp)
temp_stderr_file=$(mktemp)

# Catch an interrupt signal and remove the temporary files.
trap "rm -f $temp_time_result $temp_stderr_file; exit 1" INT TERM

# Initialize statistics value.
correct=0
total_time=0

# Set the printf variables to their default values.
function PRINTF_RESET {
	PF_INPUT=%-18s
	PF_OUTPUT=%-15s
	PF_ANSWER=%-15s
	PF_TIME=%-8s
}
PRINTF_RESET

# Draw a nice header.
printf "${BOLD}$PF_INPUT$PF_OUTPUT$PF_ANSWER$PF_TIME\n$NORMAL" INPUT OUTPUT ANSWER 'TIME (s)'

# Run the PROGRAM on all the samples in the samples folder.
for input in $(ls "$SAMPLES"/*.in) 
do
	# Reset the printf variable colors.
	PRINTF_RESET

	# Set the answer file and answer from this file.
	answer_file="${input%in}out"
	answer="$(< $answer_file)"

	# Run the PROGRAM and set the stdout and stderr outputs.
	stdout="$( ( time timeout $MAX_TIME $RUN$PROGRAM < $input 2> $temp_stderr_file ) 2> $temp_time_result)"
	stderr="$(< $temp_stderr_file)"

	# Filter the time the PROGRAM took.
	time="$(grep real < $temp_time_result | awk '{print $2}' | sed 's/0m//' | tr -d s)"
	max_time="$(tr -d 'smhd' <<< $MAX_TIME)"

	# Check if there was a time-out or error.
	if [[ $(awk 'BEGIN {print ("'$time'" >= "'$max_time'" && "'$max_time'" != "0")}') == 1 ]]
	then
		PF_TIME="$RED$PF_TIME$RESET" 
		stdout="TIME-OUT"
	elif [[ "$stdout" == "" ]] 
	then
		stdout="ERROR"
	fi

	# Check if the answer is correct and set colors and variables accordingly.
	if [[ "$stdout" == "$answer" ]]
	then
		PF_OUTPUT="$GREEN$PF_OUTPUT$RESET"
		let correct++
		[[ *m* != $time ]] && let total_time="total_time + $(tr -d ',.' <<< $time | sed 's/^0*//g')"
	else
		PF_OUTPUT="$RED$PF_OUTPUT$RESET"
	fi

	# Remove preceding path from input file.
	input_file=${input##*/}

	# Print answer and debug info if the debug variable is set.
	printf "$PF_INPUT$PF_OUTPUT$PF_ANSWER$PF_TIME\n" "$input_file" "$stdout" "$answer" $time
	[[ $DEBUG = true ]] && [[ "$stderr" != "" ]] && echo -e "$DIM$stderr$RESET" >&2
done

# Print the statistics.
TOTAL=$(ls "$SAMPLES"/*.in | wc -l)
[[ $STATS = true ]] && echo -e You answered $correct/$TOTAL correct in an average time of $(( $total_time / $TOTAL )) ms.

# Remove the temporary files.
rm -f $temp_time_result $temp_stderr_file
